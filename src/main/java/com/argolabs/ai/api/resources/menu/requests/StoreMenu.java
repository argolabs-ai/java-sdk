/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.resources.menu.requests;

import com.argolabs.ai.api.core.ObjectMappers;
import com.argolabs.ai.api.types.CategoryRequest;
import com.argolabs.ai.api.types.MenuItemRequest;
import com.argolabs.ai.api.types.MenuRequest;
import com.argolabs.ai.api.types.ModifierGroupRequest;
import com.argolabs.ai.api.types.ModifierItem;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StoreMenu.Builder.class)
public final class StoreMenu {
    private final Optional<List<MenuRequest>> menus;

    private final Optional<List<CategoryRequest>> categories;

    private final List<MenuItemRequest> items;

    private final Optional<List<ModifierGroupRequest>> modifierGroups;

    private final Optional<List<ModifierItem>> modifierItems;

    private final Map<String, Object> additionalProperties;

    private StoreMenu(
            Optional<List<MenuRequest>> menus,
            Optional<List<CategoryRequest>> categories,
            List<MenuItemRequest> items,
            Optional<List<ModifierGroupRequest>> modifierGroups,
            Optional<List<ModifierItem>> modifierItems,
            Map<String, Object> additionalProperties) {
        this.menus = menus;
        this.categories = categories;
        this.items = items;
        this.modifierGroups = modifierGroups;
        this.modifierItems = modifierItems;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("menus")
    public Optional<List<MenuRequest>> getMenus() {
        return menus;
    }

    @JsonProperty("categories")
    public Optional<List<CategoryRequest>> getCategories() {
        return categories;
    }

    @JsonProperty("items")
    public List<MenuItemRequest> getItems() {
        return items;
    }

    @JsonProperty("modifier_groups")
    public Optional<List<ModifierGroupRequest>> getModifierGroups() {
        return modifierGroups;
    }

    @JsonProperty("modifier_items")
    public Optional<List<ModifierItem>> getModifierItems() {
        return modifierItems;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StoreMenu && equalTo((StoreMenu) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StoreMenu other) {
        return menus.equals(other.menus)
                && categories.equals(other.categories)
                && items.equals(other.items)
                && modifierGroups.equals(other.modifierGroups)
                && modifierItems.equals(other.modifierItems);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.menus, this.categories, this.items, this.modifierGroups, this.modifierItems);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<MenuRequest>> menus = Optional.empty();

        private Optional<List<CategoryRequest>> categories = Optional.empty();

        private List<MenuItemRequest> items = new ArrayList<>();

        private Optional<List<ModifierGroupRequest>> modifierGroups = Optional.empty();

        private Optional<List<ModifierItem>> modifierItems = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(StoreMenu other) {
            menus(other.getMenus());
            categories(other.getCategories());
            items(other.getItems());
            modifierGroups(other.getModifierGroups());
            modifierItems(other.getModifierItems());
            return this;
        }

        @JsonSetter(value = "menus", nulls = Nulls.SKIP)
        public Builder menus(Optional<List<MenuRequest>> menus) {
            this.menus = menus;
            return this;
        }

        public Builder menus(List<MenuRequest> menus) {
            this.menus = Optional.ofNullable(menus);
            return this;
        }

        @JsonSetter(value = "categories", nulls = Nulls.SKIP)
        public Builder categories(Optional<List<CategoryRequest>> categories) {
            this.categories = categories;
            return this;
        }

        public Builder categories(List<CategoryRequest> categories) {
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public Builder items(List<MenuItemRequest> items) {
            this.items.clear();
            this.items.addAll(items);
            return this;
        }

        public Builder addItems(MenuItemRequest items) {
            this.items.add(items);
            return this;
        }

        public Builder addAllItems(List<MenuItemRequest> items) {
            this.items.addAll(items);
            return this;
        }

        @JsonSetter(value = "modifier_groups", nulls = Nulls.SKIP)
        public Builder modifierGroups(Optional<List<ModifierGroupRequest>> modifierGroups) {
            this.modifierGroups = modifierGroups;
            return this;
        }

        public Builder modifierGroups(List<ModifierGroupRequest> modifierGroups) {
            this.modifierGroups = Optional.ofNullable(modifierGroups);
            return this;
        }

        @JsonSetter(value = "modifier_items", nulls = Nulls.SKIP)
        public Builder modifierItems(Optional<List<ModifierItem>> modifierItems) {
            this.modifierItems = modifierItems;
            return this;
        }

        public Builder modifierItems(List<ModifierItem> modifierItems) {
            this.modifierItems = Optional.ofNullable(modifierItems);
            return this;
        }

        public StoreMenu build() {
            return new StoreMenu(menus, categories, items, modifierGroups, modifierItems, additionalProperties);
        }
    }
}
