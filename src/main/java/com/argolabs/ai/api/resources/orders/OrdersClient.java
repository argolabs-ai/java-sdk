/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.resources.orders;

import com.argolabs.ai.api.core.ArgoLabsApiException;
import com.argolabs.ai.api.core.ArgoLabsException;
import com.argolabs.ai.api.core.ClientOptions;
import com.argolabs.ai.api.core.ObjectMappers;
import com.argolabs.ai.api.core.RequestOptions;
import com.argolabs.ai.api.errors.UnprocessableEntityError;
import com.argolabs.ai.api.resources.orders.requests.GetOrdersV1StoresStoreIdOrdersGetRequest;
import com.argolabs.ai.api.types.HttpValidationError;
import com.argolabs.ai.api.types.OrderDetailResponse;
import com.argolabs.ai.api.types.OrdersResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class OrdersClient {
    protected final ClientOptions clientOptions;

    public OrdersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public OrderDetailResponse getOrderById(String orderArgoId) {
        return getOrderById(orderArgoId, null);
    }

    public OrderDetailResponse getOrderById(String orderArgoId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/orders")
                .addPathSegment(orderArgoId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), OrderDetailResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ArgoLabsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new ArgoLabsException("Network error executing HTTP request", e);
        }
    }

    public OrdersResponse getOrders(String storeArgoId) {
        return getOrders(
                storeArgoId, GetOrdersV1StoresStoreIdOrdersGetRequest.builder().build());
    }

    public OrdersResponse getOrders(String storeArgoId, GetOrdersV1StoresStoreIdOrdersGetRequest request) {
        return getOrders(storeArgoId, request, null);
    }

    public OrdersResponse getOrders(
            String storeArgoId, GetOrdersV1StoresStoreIdOrdersGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/stores")
                .addPathSegment(storeArgoId)
                .addPathSegments("orders");
        if (request.getStartTime().isPresent()) {
            httpUrl.addQueryParameter("start_time", request.getStartTime().get().toString());
        }
        if (request.getEndTime().isPresent()) {
            httpUrl.addQueryParameter("end_time", request.getEndTime().get().toString());
        }
        if (request.getCustomerName().isPresent()) {
            httpUrl.addQueryParameter("customer_name", request.getCustomerName().get());
        }
        if (request.getPhoneNumber().isPresent()) {
            httpUrl.addQueryParameter("phone_number", request.getPhoneNumber().get());
        }
        if (request.getStatus().isPresent()) {
            httpUrl.addQueryParameter("status", request.getStatus().get());
        }
        if (request.getPageIndex().isPresent()) {
            httpUrl.addQueryParameter("page_index", request.getPageIndex().get().toString());
        }
        if (request.getPageSize().isPresent()) {
            httpUrl.addQueryParameter("page_size", request.getPageSize().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), OrdersResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ArgoLabsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new ArgoLabsException("Network error executing HTTP request", e);
        }
    }
}
