/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.resources.orders.requests;

import com.argolabs.ai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetOrdersV1StoresStoreIdOrdersGetRequest.Builder.class)
public final class GetOrdersV1StoresStoreIdOrdersGetRequest {
    private final Optional<OffsetDateTime> startTime;

    private final Optional<OffsetDateTime> endTime;

    private final Optional<String> customerName;

    private final Optional<String> phoneNumber;

    private final Optional<String> status;

    private final Optional<Integer> pageIndex;

    private final Optional<Integer> pageSize;

    private final Map<String, Object> additionalProperties;

    private GetOrdersV1StoresStoreIdOrdersGetRequest(
            Optional<OffsetDateTime> startTime,
            Optional<OffsetDateTime> endTime,
            Optional<String> customerName,
            Optional<String> phoneNumber,
            Optional<String> status,
            Optional<Integer> pageIndex,
            Optional<Integer> pageSize,
            Map<String, Object> additionalProperties) {
        this.startTime = startTime;
        this.endTime = endTime;
        this.customerName = customerName;
        this.phoneNumber = phoneNumber;
        this.status = status;
        this.pageIndex = pageIndex;
        this.pageSize = pageSize;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("start_time")
    public Optional<OffsetDateTime> getStartTime() {
        return startTime;
    }

    @JsonProperty("end_time")
    public Optional<OffsetDateTime> getEndTime() {
        return endTime;
    }

    @JsonProperty("customer_name")
    public Optional<String> getCustomerName() {
        return customerName;
    }

    @JsonProperty("phone_number")
    public Optional<String> getPhoneNumber() {
        return phoneNumber;
    }

    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    @JsonProperty("page_index")
    public Optional<Integer> getPageIndex() {
        return pageIndex;
    }

    @JsonProperty("page_size")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetOrdersV1StoresStoreIdOrdersGetRequest
                && equalTo((GetOrdersV1StoresStoreIdOrdersGetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetOrdersV1StoresStoreIdOrdersGetRequest other) {
        return startTime.equals(other.startTime)
                && endTime.equals(other.endTime)
                && customerName.equals(other.customerName)
                && phoneNumber.equals(other.phoneNumber)
                && status.equals(other.status)
                && pageIndex.equals(other.pageIndex)
                && pageSize.equals(other.pageSize);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.startTime,
                this.endTime,
                this.customerName,
                this.phoneNumber,
                this.status,
                this.pageIndex,
                this.pageSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OffsetDateTime> startTime = Optional.empty();

        private Optional<OffsetDateTime> endTime = Optional.empty();

        private Optional<String> customerName = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<String> status = Optional.empty();

        private Optional<Integer> pageIndex = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetOrdersV1StoresStoreIdOrdersGetRequest other) {
            startTime(other.getStartTime());
            endTime(other.getEndTime());
            customerName(other.getCustomerName());
            phoneNumber(other.getPhoneNumber());
            status(other.getStatus());
            pageIndex(other.getPageIndex());
            pageSize(other.getPageSize());
            return this;
        }

        @JsonSetter(value = "start_time", nulls = Nulls.SKIP)
        public Builder startTime(Optional<OffsetDateTime> startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder startTime(OffsetDateTime startTime) {
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        @JsonSetter(value = "end_time", nulls = Nulls.SKIP)
        public Builder endTime(Optional<OffsetDateTime> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder endTime(OffsetDateTime endTime) {
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        @JsonSetter(value = "customer_name", nulls = Nulls.SKIP)
        public Builder customerName(Optional<String> customerName) {
            this.customerName = customerName;
            return this;
        }

        public Builder customerName(String customerName) {
            this.customerName = Optional.ofNullable(customerName);
            return this;
        }

        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "page_index", nulls = Nulls.SKIP)
        public Builder pageIndex(Optional<Integer> pageIndex) {
            this.pageIndex = pageIndex;
            return this;
        }

        public Builder pageIndex(Integer pageIndex) {
            this.pageIndex = Optional.ofNullable(pageIndex);
            return this;
        }

        @JsonSetter(value = "page_size", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        public GetOrdersV1StoresStoreIdOrdersGetRequest build() {
            return new GetOrdersV1StoresStoreIdOrdersGetRequest(
                    startTime, endTime, customerName, phoneNumber, status, pageIndex, pageSize, additionalProperties);
        }
    }
}
