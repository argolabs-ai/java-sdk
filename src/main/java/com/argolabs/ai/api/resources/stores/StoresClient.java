/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.resources.stores;

import com.argolabs.ai.api.core.ArgoLabsApiException;
import com.argolabs.ai.api.core.ArgoLabsException;
import com.argolabs.ai.api.core.ClientOptions;
import com.argolabs.ai.api.core.ObjectMappers;
import com.argolabs.ai.api.core.RequestOptions;
import com.argolabs.ai.api.errors.UnprocessableEntityError;
import com.argolabs.ai.api.resources.stores.requests.ReadStoresV1StoresGetRequest;
import com.argolabs.ai.api.types.HttpValidationError;
import com.argolabs.ai.api.types.StoreResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.IOException;
import java.util.List;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class StoresClient {
    protected final ClientOptions clientOptions;

    public StoresClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public List<StoreResponse> readStores() {
        return readStores(ReadStoresV1StoresGetRequest.builder().build());
    }

    public List<StoreResponse> readStores(ReadStoresV1StoresGetRequest request) {
        return readStores(request, null);
    }

    public List<StoreResponse> readStores(ReadStoresV1StoresGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/stores");
        if (request.getSkip().isPresent()) {
            httpUrl.addQueryParameter("skip", request.getSkip().get().toString());
        }
        if (request.getLimit().isPresent()) {
            httpUrl.addQueryParameter("limit", request.getLimit().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        responseBody.string(), new TypeReference<List<StoreResponse>>() {});
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ArgoLabsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new ArgoLabsException("Network error executing HTTP request", e);
        }
    }

    public StoreResponse readStore(String storeArgoId) {
        return readStore(storeArgoId, null);
    }

    public StoreResponse readStore(String storeArgoId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/stores")
                .addPathSegment(storeArgoId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), StoreResponse.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 422) {
                    throw new UnprocessableEntityError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, HttpValidationError.class));
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new ArgoLabsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new ArgoLabsException("Network error executing HTTP request", e);
        }
    }
}
