/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.types;

import com.argolabs.ai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Availability.Builder.class)
public final class Availability {
    private final String dayOfWeek;

    private final List<TimePeriodsRequest> timePeriods;

    private final Map<String, Object> additionalProperties;

    private Availability(
            String dayOfWeek, List<TimePeriodsRequest> timePeriods, Map<String, Object> additionalProperties) {
        this.dayOfWeek = dayOfWeek;
        this.timePeriods = timePeriods;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("day_of_week")
    public String getDayOfWeek() {
        return dayOfWeek;
    }

    @JsonProperty("time_periods")
    public List<TimePeriodsRequest> getTimePeriods() {
        return timePeriods;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Availability && equalTo((Availability) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Availability other) {
        return dayOfWeek.equals(other.dayOfWeek) && timePeriods.equals(other.timePeriods);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.dayOfWeek, this.timePeriods);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DayOfWeekStage builder() {
        return new Builder();
    }

    public interface DayOfWeekStage {
        _FinalStage dayOfWeek(String dayOfWeek);

        Builder from(Availability other);
    }

    public interface _FinalStage {
        Availability build();

        _FinalStage timePeriods(List<TimePeriodsRequest> timePeriods);

        _FinalStage addTimePeriods(TimePeriodsRequest timePeriods);

        _FinalStage addAllTimePeriods(List<TimePeriodsRequest> timePeriods);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DayOfWeekStage, _FinalStage {
        private String dayOfWeek;

        private List<TimePeriodsRequest> timePeriods = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Availability other) {
            dayOfWeek(other.getDayOfWeek());
            timePeriods(other.getTimePeriods());
            return this;
        }

        @java.lang.Override
        @JsonSetter("day_of_week")
        public _FinalStage dayOfWeek(String dayOfWeek) {
            this.dayOfWeek = dayOfWeek;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllTimePeriods(List<TimePeriodsRequest> timePeriods) {
            this.timePeriods.addAll(timePeriods);
            return this;
        }

        @java.lang.Override
        public _FinalStage addTimePeriods(TimePeriodsRequest timePeriods) {
            this.timePeriods.add(timePeriods);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "time_periods", nulls = Nulls.SKIP)
        public _FinalStage timePeriods(List<TimePeriodsRequest> timePeriods) {
            this.timePeriods.clear();
            this.timePeriods.addAll(timePeriods);
            return this;
        }

        @java.lang.Override
        public Availability build() {
            return new Availability(dayOfWeek, timePeriods, additionalProperties);
        }
    }
}
