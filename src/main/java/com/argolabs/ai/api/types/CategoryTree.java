/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.types;

import com.argolabs.ai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CategoryTree.Builder.class)
public final class CategoryTree {
    private final int id;

    private final String externalId;

    private final MultilingualText name;

    private final Optional<MultilingualText> description;

    private final List<MenuItemTree> items;

    private final Map<String, Object> additionalProperties;

    private CategoryTree(
            int id,
            String externalId,
            MultilingualText name,
            Optional<MultilingualText> description,
            List<MenuItemTree> items,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.externalId = externalId;
        this.name = name;
        this.description = description;
        this.items = items;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public int getId() {
        return id;
    }

    @JsonProperty("external_id")
    public String getExternalId() {
        return externalId;
    }

    @JsonProperty("name")
    public MultilingualText getName() {
        return name;
    }

    @JsonProperty("description")
    public Optional<MultilingualText> getDescription() {
        return description;
    }

    @JsonProperty("items")
    public List<MenuItemTree> getItems() {
        return items;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CategoryTree && equalTo((CategoryTree) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CategoryTree other) {
        return id == other.id
                && externalId.equals(other.externalId)
                && name.equals(other.name)
                && description.equals(other.description)
                && items.equals(other.items);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.externalId, this.name, this.description, this.items);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        ExternalIdStage id(int id);

        Builder from(CategoryTree other);
    }

    public interface ExternalIdStage {
        NameStage externalId(String externalId);
    }

    public interface NameStage {
        _FinalStage name(MultilingualText name);
    }

    public interface _FinalStage {
        CategoryTree build();

        _FinalStage description(Optional<MultilingualText> description);

        _FinalStage description(MultilingualText description);

        _FinalStage items(List<MenuItemTree> items);

        _FinalStage addItems(MenuItemTree items);

        _FinalStage addAllItems(List<MenuItemTree> items);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, ExternalIdStage, NameStage, _FinalStage {
        private int id;

        private String externalId;

        private MultilingualText name;

        private List<MenuItemTree> items = new ArrayList<>();

        private Optional<MultilingualText> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CategoryTree other) {
            id(other.getId());
            externalId(other.getExternalId());
            name(other.getName());
            description(other.getDescription());
            items(other.getItems());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public ExternalIdStage id(int id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("external_id")
        public NameStage externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(MultilingualText name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllItems(List<MenuItemTree> items) {
            this.items.addAll(items);
            return this;
        }

        @java.lang.Override
        public _FinalStage addItems(MenuItemTree items) {
            this.items.add(items);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public _FinalStage items(List<MenuItemTree> items) {
            this.items.clear();
            this.items.addAll(items);
            return this;
        }

        @java.lang.Override
        public _FinalStage description(MultilingualText description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<MultilingualText> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public CategoryTree build() {
            return new CategoryTree(id, externalId, name, description, items, additionalProperties);
        }
    }
}
