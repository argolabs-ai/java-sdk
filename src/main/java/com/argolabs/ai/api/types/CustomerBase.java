/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.types;

import com.argolabs.ai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerBase.Builder.class)
public final class CustomerBase {
    private final String name;

    private final String phone;

    private final Map<String, Object> additionalProperties;

    private CustomerBase(String name, String phone, Map<String, Object> additionalProperties) {
        this.name = name;
        this.phone = phone;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("phone")
    public String getPhone() {
        return phone;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerBase && equalTo((CustomerBase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerBase other) {
        return name.equals(other.name) && phone.equals(other.phone);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.phone);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        PhoneStage name(String name);

        Builder from(CustomerBase other);
    }

    public interface PhoneStage {
        _FinalStage phone(String phone);
    }

    public interface _FinalStage {
        CustomerBase build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, PhoneStage, _FinalStage {
        private String name;

        private String phone;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CustomerBase other) {
            name(other.getName());
            phone(other.getPhone());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public PhoneStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("phone")
        public _FinalStage phone(String phone) {
            this.phone = phone;
            return this;
        }

        @java.lang.Override
        public CustomerBase build() {
            return new CustomerBase(name, phone, additionalProperties);
        }
    }
}
