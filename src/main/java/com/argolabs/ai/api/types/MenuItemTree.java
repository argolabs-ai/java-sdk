/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.types;

import com.argolabs.ai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MenuItemTree.Builder.class)
public final class MenuItemTree {
    private final int id;

    private final String externalId;

    private final MultilingualText name;

    private final Optional<MultilingualText> description;

    private final int price;

    private final int tax;

    private final boolean inStock;

    private final Optional<String> ingredients;

    private final Optional<String> allergens;

    private final Optional<List<DietaryLabel>> dietaryLabels;

    private final Optional<Integer> prepTime;

    private final Optional<Double> alcoholByVolume;

    private final Optional<String> prepType;

    private final boolean sellSeparately;

    private final List<ModifierGroupTree> modifierGroups;

    private final Map<String, Object> additionalProperties;

    private MenuItemTree(
            int id,
            String externalId,
            MultilingualText name,
            Optional<MultilingualText> description,
            int price,
            int tax,
            boolean inStock,
            Optional<String> ingredients,
            Optional<String> allergens,
            Optional<List<DietaryLabel>> dietaryLabels,
            Optional<Integer> prepTime,
            Optional<Double> alcoholByVolume,
            Optional<String> prepType,
            boolean sellSeparately,
            List<ModifierGroupTree> modifierGroups,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.externalId = externalId;
        this.name = name;
        this.description = description;
        this.price = price;
        this.tax = tax;
        this.inStock = inStock;
        this.ingredients = ingredients;
        this.allergens = allergens;
        this.dietaryLabels = dietaryLabels;
        this.prepTime = prepTime;
        this.alcoholByVolume = alcoholByVolume;
        this.prepType = prepType;
        this.sellSeparately = sellSeparately;
        this.modifierGroups = modifierGroups;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public int getId() {
        return id;
    }

    @JsonProperty("external_id")
    public String getExternalId() {
        return externalId;
    }

    @JsonProperty("name")
    public MultilingualText getName() {
        return name;
    }

    @JsonProperty("description")
    public Optional<MultilingualText> getDescription() {
        return description;
    }

    @JsonProperty("price")
    public int getPrice() {
        return price;
    }

    @JsonProperty("tax")
    public int getTax() {
        return tax;
    }

    @JsonProperty("in_stock")
    public boolean getInStock() {
        return inStock;
    }

    @JsonProperty("ingredients")
    public Optional<String> getIngredients() {
        return ingredients;
    }

    @JsonProperty("allergens")
    public Optional<String> getAllergens() {
        return allergens;
    }

    @JsonProperty("dietary_labels")
    public Optional<List<DietaryLabel>> getDietaryLabels() {
        return dietaryLabels;
    }

    @JsonProperty("prep_time")
    public Optional<Integer> getPrepTime() {
        return prepTime;
    }

    @JsonProperty("alcohol_by_volume")
    public Optional<Double> getAlcoholByVolume() {
        return alcoholByVolume;
    }

    @JsonProperty("prep_type")
    public Optional<String> getPrepType() {
        return prepType;
    }

    @JsonProperty("sell_separately")
    public boolean getSellSeparately() {
        return sellSeparately;
    }

    @JsonProperty("modifier_groups")
    public List<ModifierGroupTree> getModifierGroups() {
        return modifierGroups;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MenuItemTree && equalTo((MenuItemTree) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MenuItemTree other) {
        return id == other.id
                && externalId.equals(other.externalId)
                && name.equals(other.name)
                && description.equals(other.description)
                && price == other.price
                && tax == other.tax
                && inStock == other.inStock
                && ingredients.equals(other.ingredients)
                && allergens.equals(other.allergens)
                && dietaryLabels.equals(other.dietaryLabels)
                && prepTime.equals(other.prepTime)
                && alcoholByVolume.equals(other.alcoholByVolume)
                && prepType.equals(other.prepType)
                && sellSeparately == other.sellSeparately
                && modifierGroups.equals(other.modifierGroups);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.externalId,
                this.name,
                this.description,
                this.price,
                this.tax,
                this.inStock,
                this.ingredients,
                this.allergens,
                this.dietaryLabels,
                this.prepTime,
                this.alcoholByVolume,
                this.prepType,
                this.sellSeparately,
                this.modifierGroups);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        ExternalIdStage id(int id);

        Builder from(MenuItemTree other);
    }

    public interface ExternalIdStage {
        NameStage externalId(String externalId);
    }

    public interface NameStage {
        PriceStage name(MultilingualText name);
    }

    public interface PriceStage {
        TaxStage price(int price);
    }

    public interface TaxStage {
        InStockStage tax(int tax);
    }

    public interface InStockStage {
        SellSeparatelyStage inStock(boolean inStock);
    }

    public interface SellSeparatelyStage {
        _FinalStage sellSeparately(boolean sellSeparately);
    }

    public interface _FinalStage {
        MenuItemTree build();

        _FinalStage description(Optional<MultilingualText> description);

        _FinalStage description(MultilingualText description);

        _FinalStage ingredients(Optional<String> ingredients);

        _FinalStage ingredients(String ingredients);

        _FinalStage allergens(Optional<String> allergens);

        _FinalStage allergens(String allergens);

        _FinalStage dietaryLabels(Optional<List<DietaryLabel>> dietaryLabels);

        _FinalStage dietaryLabels(List<DietaryLabel> dietaryLabels);

        _FinalStage prepTime(Optional<Integer> prepTime);

        _FinalStage prepTime(Integer prepTime);

        _FinalStage alcoholByVolume(Optional<Double> alcoholByVolume);

        _FinalStage alcoholByVolume(Double alcoholByVolume);

        _FinalStage prepType(Optional<String> prepType);

        _FinalStage prepType(String prepType);

        _FinalStage modifierGroups(List<ModifierGroupTree> modifierGroups);

        _FinalStage addModifierGroups(ModifierGroupTree modifierGroups);

        _FinalStage addAllModifierGroups(List<ModifierGroupTree> modifierGroups);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    ExternalIdStage,
                    NameStage,
                    PriceStage,
                    TaxStage,
                    InStockStage,
                    SellSeparatelyStage,
                    _FinalStage {
        private int id;

        private String externalId;

        private MultilingualText name;

        private int price;

        private int tax;

        private boolean inStock;

        private boolean sellSeparately;

        private List<ModifierGroupTree> modifierGroups = new ArrayList<>();

        private Optional<String> prepType = Optional.empty();

        private Optional<Double> alcoholByVolume = Optional.empty();

        private Optional<Integer> prepTime = Optional.empty();

        private Optional<List<DietaryLabel>> dietaryLabels = Optional.empty();

        private Optional<String> allergens = Optional.empty();

        private Optional<String> ingredients = Optional.empty();

        private Optional<MultilingualText> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MenuItemTree other) {
            id(other.getId());
            externalId(other.getExternalId());
            name(other.getName());
            description(other.getDescription());
            price(other.getPrice());
            tax(other.getTax());
            inStock(other.getInStock());
            ingredients(other.getIngredients());
            allergens(other.getAllergens());
            dietaryLabels(other.getDietaryLabels());
            prepTime(other.getPrepTime());
            alcoholByVolume(other.getAlcoholByVolume());
            prepType(other.getPrepType());
            sellSeparately(other.getSellSeparately());
            modifierGroups(other.getModifierGroups());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public ExternalIdStage id(int id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("external_id")
        public NameStage externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public PriceStage name(MultilingualText name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("price")
        public TaxStage price(int price) {
            this.price = price;
            return this;
        }

        @java.lang.Override
        @JsonSetter("tax")
        public InStockStage tax(int tax) {
            this.tax = tax;
            return this;
        }

        @java.lang.Override
        @JsonSetter("in_stock")
        public SellSeparatelyStage inStock(boolean inStock) {
            this.inStock = inStock;
            return this;
        }

        @java.lang.Override
        @JsonSetter("sell_separately")
        public _FinalStage sellSeparately(boolean sellSeparately) {
            this.sellSeparately = sellSeparately;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllModifierGroups(List<ModifierGroupTree> modifierGroups) {
            this.modifierGroups.addAll(modifierGroups);
            return this;
        }

        @java.lang.Override
        public _FinalStage addModifierGroups(ModifierGroupTree modifierGroups) {
            this.modifierGroups.add(modifierGroups);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "modifier_groups", nulls = Nulls.SKIP)
        public _FinalStage modifierGroups(List<ModifierGroupTree> modifierGroups) {
            this.modifierGroups.clear();
            this.modifierGroups.addAll(modifierGroups);
            return this;
        }

        @java.lang.Override
        public _FinalStage prepType(String prepType) {
            this.prepType = Optional.ofNullable(prepType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "prep_type", nulls = Nulls.SKIP)
        public _FinalStage prepType(Optional<String> prepType) {
            this.prepType = prepType;
            return this;
        }

        @java.lang.Override
        public _FinalStage alcoholByVolume(Double alcoholByVolume) {
            this.alcoholByVolume = Optional.ofNullable(alcoholByVolume);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "alcohol_by_volume", nulls = Nulls.SKIP)
        public _FinalStage alcoholByVolume(Optional<Double> alcoholByVolume) {
            this.alcoholByVolume = alcoholByVolume;
            return this;
        }

        @java.lang.Override
        public _FinalStage prepTime(Integer prepTime) {
            this.prepTime = Optional.ofNullable(prepTime);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "prep_time", nulls = Nulls.SKIP)
        public _FinalStage prepTime(Optional<Integer> prepTime) {
            this.prepTime = prepTime;
            return this;
        }

        @java.lang.Override
        public _FinalStage dietaryLabels(List<DietaryLabel> dietaryLabels) {
            this.dietaryLabels = Optional.ofNullable(dietaryLabels);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dietary_labels", nulls = Nulls.SKIP)
        public _FinalStage dietaryLabels(Optional<List<DietaryLabel>> dietaryLabels) {
            this.dietaryLabels = dietaryLabels;
            return this;
        }

        @java.lang.Override
        public _FinalStage allergens(String allergens) {
            this.allergens = Optional.ofNullable(allergens);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "allergens", nulls = Nulls.SKIP)
        public _FinalStage allergens(Optional<String> allergens) {
            this.allergens = allergens;
            return this;
        }

        @java.lang.Override
        public _FinalStage ingredients(String ingredients) {
            this.ingredients = Optional.ofNullable(ingredients);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ingredients", nulls = Nulls.SKIP)
        public _FinalStage ingredients(Optional<String> ingredients) {
            this.ingredients = ingredients;
            return this;
        }

        @java.lang.Override
        public _FinalStage description(MultilingualText description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<MultilingualText> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public MenuItemTree build() {
            return new MenuItemTree(
                    id,
                    externalId,
                    name,
                    description,
                    price,
                    tax,
                    inStock,
                    ingredients,
                    allergens,
                    dietaryLabels,
                    prepTime,
                    alcoholByVolume,
                    prepType,
                    sellSeparately,
                    modifierGroups,
                    additionalProperties);
        }
    }
}
