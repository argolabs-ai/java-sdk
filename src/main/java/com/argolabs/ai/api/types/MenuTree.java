/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.types;

import com.argolabs.ai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MenuTree.Builder.class)
public final class MenuTree {
    private final int id;

    private final String externalId;

    private final MultilingualText name;

    private final List<CategoryTree> categories;

    private final List<Availability> availability;

    private final Map<String, Object> additionalProperties;

    private MenuTree(
            int id,
            String externalId,
            MultilingualText name,
            List<CategoryTree> categories,
            List<Availability> availability,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.externalId = externalId;
        this.name = name;
        this.categories = categories;
        this.availability = availability;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public int getId() {
        return id;
    }

    @JsonProperty("external_id")
    public String getExternalId() {
        return externalId;
    }

    @JsonProperty("name")
    public MultilingualText getName() {
        return name;
    }

    @JsonProperty("categories")
    public List<CategoryTree> getCategories() {
        return categories;
    }

    @JsonProperty("availability")
    public List<Availability> getAvailability() {
        return availability;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MenuTree && equalTo((MenuTree) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MenuTree other) {
        return id == other.id
                && externalId.equals(other.externalId)
                && name.equals(other.name)
                && categories.equals(other.categories)
                && availability.equals(other.availability);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.externalId, this.name, this.categories, this.availability);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        ExternalIdStage id(int id);

        Builder from(MenuTree other);
    }

    public interface ExternalIdStage {
        NameStage externalId(String externalId);
    }

    public interface NameStage {
        _FinalStage name(MultilingualText name);
    }

    public interface _FinalStage {
        MenuTree build();

        _FinalStage categories(List<CategoryTree> categories);

        _FinalStage addCategories(CategoryTree categories);

        _FinalStage addAllCategories(List<CategoryTree> categories);

        _FinalStage availability(List<Availability> availability);

        _FinalStage addAvailability(Availability availability);

        _FinalStage addAllAvailability(List<Availability> availability);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, ExternalIdStage, NameStage, _FinalStage {
        private int id;

        private String externalId;

        private MultilingualText name;

        private List<Availability> availability = new ArrayList<>();

        private List<CategoryTree> categories = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MenuTree other) {
            id(other.getId());
            externalId(other.getExternalId());
            name(other.getName());
            categories(other.getCategories());
            availability(other.getAvailability());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public ExternalIdStage id(int id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("external_id")
        public NameStage externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(MultilingualText name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllAvailability(List<Availability> availability) {
            this.availability.addAll(availability);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAvailability(Availability availability) {
            this.availability.add(availability);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "availability", nulls = Nulls.SKIP)
        public _FinalStage availability(List<Availability> availability) {
            this.availability.clear();
            this.availability.addAll(availability);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllCategories(List<CategoryTree> categories) {
            this.categories.addAll(categories);
            return this;
        }

        @java.lang.Override
        public _FinalStage addCategories(CategoryTree categories) {
            this.categories.add(categories);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "categories", nulls = Nulls.SKIP)
        public _FinalStage categories(List<CategoryTree> categories) {
            this.categories.clear();
            this.categories.addAll(categories);
            return this;
        }

        @java.lang.Override
        public MenuTree build() {
            return new MenuTree(id, externalId, name, categories, availability, additionalProperties);
        }
    }
}
