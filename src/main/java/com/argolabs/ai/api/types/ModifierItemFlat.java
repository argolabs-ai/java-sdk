/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.types;

import com.argolabs.ai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ModifierItemFlat.Builder.class)
public final class ModifierItemFlat {
    private final String externalId;

    private final Optional<String> menuItemExternalId;

    private final MultilingualText name;

    private final Optional<MultilingualText> description;

    private final int priceChange;

    private final int taxChange;

    private final Optional<Boolean> inStock;

    private final int minQuantity;

    private final int maxQuantity;

    private final int defaultQuantity;

    private final int id;

    private final Map<String, Object> additionalProperties;

    private ModifierItemFlat(
            String externalId,
            Optional<String> menuItemExternalId,
            MultilingualText name,
            Optional<MultilingualText> description,
            int priceChange,
            int taxChange,
            Optional<Boolean> inStock,
            int minQuantity,
            int maxQuantity,
            int defaultQuantity,
            int id,
            Map<String, Object> additionalProperties) {
        this.externalId = externalId;
        this.menuItemExternalId = menuItemExternalId;
        this.name = name;
        this.description = description;
        this.priceChange = priceChange;
        this.taxChange = taxChange;
        this.inStock = inStock;
        this.minQuantity = minQuantity;
        this.maxQuantity = maxQuantity;
        this.defaultQuantity = defaultQuantity;
        this.id = id;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("external_id")
    public String getExternalId() {
        return externalId;
    }

    @JsonProperty("menu_item_external_id")
    public Optional<String> getMenuItemExternalId() {
        return menuItemExternalId;
    }

    @JsonProperty("name")
    public MultilingualText getName() {
        return name;
    }

    @JsonProperty("description")
    public Optional<MultilingualText> getDescription() {
        return description;
    }

    @JsonProperty("price_change")
    public int getPriceChange() {
        return priceChange;
    }

    @JsonProperty("tax_change")
    public int getTaxChange() {
        return taxChange;
    }

    @JsonProperty("in_stock")
    public Optional<Boolean> getInStock() {
        return inStock;
    }

    @JsonProperty("min_quantity")
    public int getMinQuantity() {
        return minQuantity;
    }

    @JsonProperty("max_quantity")
    public int getMaxQuantity() {
        return maxQuantity;
    }

    @JsonProperty("default_quantity")
    public int getDefaultQuantity() {
        return defaultQuantity;
    }

    @JsonProperty("id")
    public int getId() {
        return id;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ModifierItemFlat && equalTo((ModifierItemFlat) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ModifierItemFlat other) {
        return externalId.equals(other.externalId)
                && menuItemExternalId.equals(other.menuItemExternalId)
                && name.equals(other.name)
                && description.equals(other.description)
                && priceChange == other.priceChange
                && taxChange == other.taxChange
                && inStock.equals(other.inStock)
                && minQuantity == other.minQuantity
                && maxQuantity == other.maxQuantity
                && defaultQuantity == other.defaultQuantity
                && id == other.id;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.externalId,
                this.menuItemExternalId,
                this.name,
                this.description,
                this.priceChange,
                this.taxChange,
                this.inStock,
                this.minQuantity,
                this.maxQuantity,
                this.defaultQuantity,
                this.id);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ExternalIdStage builder() {
        return new Builder();
    }

    public interface ExternalIdStage {
        NameStage externalId(String externalId);

        Builder from(ModifierItemFlat other);
    }

    public interface NameStage {
        PriceChangeStage name(MultilingualText name);
    }

    public interface PriceChangeStage {
        TaxChangeStage priceChange(int priceChange);
    }

    public interface TaxChangeStage {
        MinQuantityStage taxChange(int taxChange);
    }

    public interface MinQuantityStage {
        MaxQuantityStage minQuantity(int minQuantity);
    }

    public interface MaxQuantityStage {
        DefaultQuantityStage maxQuantity(int maxQuantity);
    }

    public interface DefaultQuantityStage {
        IdStage defaultQuantity(int defaultQuantity);
    }

    public interface IdStage {
        _FinalStage id(int id);
    }

    public interface _FinalStage {
        ModifierItemFlat build();

        _FinalStage menuItemExternalId(Optional<String> menuItemExternalId);

        _FinalStage menuItemExternalId(String menuItemExternalId);

        _FinalStage description(Optional<MultilingualText> description);

        _FinalStage description(MultilingualText description);

        _FinalStage inStock(Optional<Boolean> inStock);

        _FinalStage inStock(Boolean inStock);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ExternalIdStage,
                    NameStage,
                    PriceChangeStage,
                    TaxChangeStage,
                    MinQuantityStage,
                    MaxQuantityStage,
                    DefaultQuantityStage,
                    IdStage,
                    _FinalStage {
        private String externalId;

        private MultilingualText name;

        private int priceChange;

        private int taxChange;

        private int minQuantity;

        private int maxQuantity;

        private int defaultQuantity;

        private int id;

        private Optional<Boolean> inStock = Optional.empty();

        private Optional<MultilingualText> description = Optional.empty();

        private Optional<String> menuItemExternalId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ModifierItemFlat other) {
            externalId(other.getExternalId());
            menuItemExternalId(other.getMenuItemExternalId());
            name(other.getName());
            description(other.getDescription());
            priceChange(other.getPriceChange());
            taxChange(other.getTaxChange());
            inStock(other.getInStock());
            minQuantity(other.getMinQuantity());
            maxQuantity(other.getMaxQuantity());
            defaultQuantity(other.getDefaultQuantity());
            id(other.getId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("external_id")
        public NameStage externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public PriceChangeStage name(MultilingualText name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("price_change")
        public TaxChangeStage priceChange(int priceChange) {
            this.priceChange = priceChange;
            return this;
        }

        @java.lang.Override
        @JsonSetter("tax_change")
        public MinQuantityStage taxChange(int taxChange) {
            this.taxChange = taxChange;
            return this;
        }

        @java.lang.Override
        @JsonSetter("min_quantity")
        public MaxQuantityStage minQuantity(int minQuantity) {
            this.minQuantity = minQuantity;
            return this;
        }

        @java.lang.Override
        @JsonSetter("max_quantity")
        public DefaultQuantityStage maxQuantity(int maxQuantity) {
            this.maxQuantity = maxQuantity;
            return this;
        }

        @java.lang.Override
        @JsonSetter("default_quantity")
        public IdStage defaultQuantity(int defaultQuantity) {
            this.defaultQuantity = defaultQuantity;
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(int id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public _FinalStage inStock(Boolean inStock) {
            this.inStock = Optional.ofNullable(inStock);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "in_stock", nulls = Nulls.SKIP)
        public _FinalStage inStock(Optional<Boolean> inStock) {
            this.inStock = inStock;
            return this;
        }

        @java.lang.Override
        public _FinalStage description(MultilingualText description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<MultilingualText> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public _FinalStage menuItemExternalId(String menuItemExternalId) {
            this.menuItemExternalId = Optional.ofNullable(menuItemExternalId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "menu_item_external_id", nulls = Nulls.SKIP)
        public _FinalStage menuItemExternalId(Optional<String> menuItemExternalId) {
            this.menuItemExternalId = menuItemExternalId;
            return this;
        }

        @java.lang.Override
        public ModifierItemFlat build() {
            return new ModifierItemFlat(
                    externalId,
                    menuItemExternalId,
                    name,
                    description,
                    priceChange,
                    taxChange,
                    inStock,
                    minQuantity,
                    maxQuantity,
                    defaultQuantity,
                    id,
                    additionalProperties);
        }
    }
}
