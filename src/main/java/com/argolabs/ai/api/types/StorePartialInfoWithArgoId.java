/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.types;

import com.argolabs.ai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StorePartialInfoWithArgoId.Builder.class)
public final class StorePartialInfoWithArgoId {
    private final OffsetDateTime createdAt;

    private final String id;

    private final Map<String, Map<String, String>> name;

    private final Optional<String> externalId;

    private final Map<String, Object> additionalProperties;

    private StorePartialInfoWithArgoId(
            OffsetDateTime createdAt,
            String id,
            Map<String, Map<String, String>> name,
            Optional<String> externalId,
            Map<String, Object> additionalProperties) {
        this.createdAt = createdAt;
        this.id = id;
        this.name = name;
        this.externalId = externalId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("name")
    public Map<String, Map<String, String>> getName() {
        return name;
    }

    @JsonProperty("external_id")
    public Optional<String> getExternalId() {
        return externalId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StorePartialInfoWithArgoId && equalTo((StorePartialInfoWithArgoId) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StorePartialInfoWithArgoId other) {
        return createdAt.equals(other.createdAt)
                && id.equals(other.id)
                && name.equals(other.name)
                && externalId.equals(other.externalId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.createdAt, this.id, this.name, this.externalId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CreatedAtStage builder() {
        return new Builder();
    }

    public interface CreatedAtStage {
        IdStage createdAt(OffsetDateTime createdAt);

        Builder from(StorePartialInfoWithArgoId other);
    }

    public interface IdStage {
        _FinalStage id(String id);
    }

    public interface _FinalStage {
        StorePartialInfoWithArgoId build();

        _FinalStage name(Map<String, Map<String, String>> name);

        _FinalStage putAllName(Map<String, Map<String, String>> name);

        _FinalStage name(String key, Map<String, String> value);

        _FinalStage externalId(Optional<String> externalId);

        _FinalStage externalId(String externalId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CreatedAtStage, IdStage, _FinalStage {
        private OffsetDateTime createdAt;

        private String id;

        private Optional<String> externalId = Optional.empty();

        private Map<String, Map<String, String>> name = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(StorePartialInfoWithArgoId other) {
            createdAt(other.getCreatedAt());
            id(other.getId());
            name(other.getName());
            externalId(other.getExternalId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("created_at")
        public IdStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(String id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public _FinalStage externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "external_id", nulls = Nulls.SKIP)
        public _FinalStage externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        public _FinalStage name(String key, Map<String, String> value) {
            this.name.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllName(Map<String, Map<String, String>> name) {
            this.name.putAll(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Map<String, Map<String, String>> name) {
            this.name.clear();
            this.name.putAll(name);
            return this;
        }

        @java.lang.Override
        public StorePartialInfoWithArgoId build() {
            return new StorePartialInfoWithArgoId(createdAt, id, name, externalId, additionalProperties);
        }
    }
}
