/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.argolabs.ai.api.types;

import com.argolabs.ai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StoreResponse.Builder.class)
public final class StoreResponse {
    private final Optional<OffsetDateTime> createdAt;

    private final String id;

    private final Map<String, Object> name;

    private final Optional<String> externalId;

    private final Optional<String> storePhone;

    private final Optional<Map<String, Object>> contacts;

    private final Optional<String> addressLine1;

    private final Optional<String> addressLine2;

    private final Optional<String> addressLine3;

    private final Optional<String> timezone;

    private final Optional<String> city;

    private final Optional<String> postalCode;

    private final Optional<String> country;

    private final Optional<String> locationName;

    private final Optional<String> adminArea;

    private final Optional<List<PhoneNumber>> phoneNumbers;

    private final Optional<MerchantResponse> merchant;

    private final Optional<StoreTypeSchema> storeType;

    private final Optional<RestaurantConfigurationResponse> restaurantConfiguration;

    private final Map<String, Object> additionalProperties;

    private StoreResponse(
            Optional<OffsetDateTime> createdAt,
            String id,
            Map<String, Object> name,
            Optional<String> externalId,
            Optional<String> storePhone,
            Optional<Map<String, Object>> contacts,
            Optional<String> addressLine1,
            Optional<String> addressLine2,
            Optional<String> addressLine3,
            Optional<String> timezone,
            Optional<String> city,
            Optional<String> postalCode,
            Optional<String> country,
            Optional<String> locationName,
            Optional<String> adminArea,
            Optional<List<PhoneNumber>> phoneNumbers,
            Optional<MerchantResponse> merchant,
            Optional<StoreTypeSchema> storeType,
            Optional<RestaurantConfigurationResponse> restaurantConfiguration,
            Map<String, Object> additionalProperties) {
        this.createdAt = createdAt;
        this.id = id;
        this.name = name;
        this.externalId = externalId;
        this.storePhone = storePhone;
        this.contacts = contacts;
        this.addressLine1 = addressLine1;
        this.addressLine2 = addressLine2;
        this.addressLine3 = addressLine3;
        this.timezone = timezone;
        this.city = city;
        this.postalCode = postalCode;
        this.country = country;
        this.locationName = locationName;
        this.adminArea = adminArea;
        this.phoneNumbers = phoneNumbers;
        this.merchant = merchant;
        this.storeType = storeType;
        this.restaurantConfiguration = restaurantConfiguration;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("name")
    public Map<String, Object> getName() {
        return name;
    }

    @JsonProperty("external_id")
    public Optional<String> getExternalId() {
        return externalId;
    }

    @JsonProperty("store_phone")
    public Optional<String> getStorePhone() {
        return storePhone;
    }

    @JsonProperty("contacts")
    public Optional<Map<String, Object>> getContacts() {
        return contacts;
    }

    @JsonProperty("address_line_1")
    public Optional<String> getAddressLine1() {
        return addressLine1;
    }

    @JsonProperty("address_line_2")
    public Optional<String> getAddressLine2() {
        return addressLine2;
    }

    @JsonProperty("address_line_3")
    public Optional<String> getAddressLine3() {
        return addressLine3;
    }

    @JsonProperty("timezone")
    public Optional<String> getTimezone() {
        return timezone;
    }

    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    @JsonProperty("postal_code")
    public Optional<String> getPostalCode() {
        return postalCode;
    }

    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    @JsonProperty("location_name")
    public Optional<String> getLocationName() {
        return locationName;
    }

    @JsonProperty("admin_area")
    public Optional<String> getAdminArea() {
        return adminArea;
    }

    @JsonProperty("phone_numbers")
    public Optional<List<PhoneNumber>> getPhoneNumbers() {
        return phoneNumbers;
    }

    @JsonProperty("merchant")
    public Optional<MerchantResponse> getMerchant() {
        return merchant;
    }

    @JsonProperty("store_type")
    public Optional<StoreTypeSchema> getStoreType() {
        return storeType;
    }

    @JsonProperty("restaurant_configuration")
    public Optional<RestaurantConfigurationResponse> getRestaurantConfiguration() {
        return restaurantConfiguration;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StoreResponse && equalTo((StoreResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StoreResponse other) {
        return createdAt.equals(other.createdAt)
                && id.equals(other.id)
                && name.equals(other.name)
                && externalId.equals(other.externalId)
                && storePhone.equals(other.storePhone)
                && contacts.equals(other.contacts)
                && addressLine1.equals(other.addressLine1)
                && addressLine2.equals(other.addressLine2)
                && addressLine3.equals(other.addressLine3)
                && timezone.equals(other.timezone)
                && city.equals(other.city)
                && postalCode.equals(other.postalCode)
                && country.equals(other.country)
                && locationName.equals(other.locationName)
                && adminArea.equals(other.adminArea)
                && phoneNumbers.equals(other.phoneNumbers)
                && merchant.equals(other.merchant)
                && storeType.equals(other.storeType)
                && restaurantConfiguration.equals(other.restaurantConfiguration);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.createdAt,
                this.id,
                this.name,
                this.externalId,
                this.storePhone,
                this.contacts,
                this.addressLine1,
                this.addressLine2,
                this.addressLine3,
                this.timezone,
                this.city,
                this.postalCode,
                this.country,
                this.locationName,
                this.adminArea,
                this.phoneNumbers,
                this.merchant,
                this.storeType,
                this.restaurantConfiguration);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        _FinalStage id(String id);

        Builder from(StoreResponse other);
    }

    public interface _FinalStage {
        StoreResponse build();

        _FinalStage createdAt(Optional<OffsetDateTime> createdAt);

        _FinalStage createdAt(OffsetDateTime createdAt);

        _FinalStage name(Map<String, Object> name);

        _FinalStage putAllName(Map<String, Object> name);

        _FinalStage name(String key, Object value);

        _FinalStage externalId(Optional<String> externalId);

        _FinalStage externalId(String externalId);

        _FinalStage storePhone(Optional<String> storePhone);

        _FinalStage storePhone(String storePhone);

        _FinalStage contacts(Optional<Map<String, Object>> contacts);

        _FinalStage contacts(Map<String, Object> contacts);

        _FinalStage addressLine1(Optional<String> addressLine1);

        _FinalStage addressLine1(String addressLine1);

        _FinalStage addressLine2(Optional<String> addressLine2);

        _FinalStage addressLine2(String addressLine2);

        _FinalStage addressLine3(Optional<String> addressLine3);

        _FinalStage addressLine3(String addressLine3);

        _FinalStage timezone(Optional<String> timezone);

        _FinalStage timezone(String timezone);

        _FinalStage city(Optional<String> city);

        _FinalStage city(String city);

        _FinalStage postalCode(Optional<String> postalCode);

        _FinalStage postalCode(String postalCode);

        _FinalStage country(Optional<String> country);

        _FinalStage country(String country);

        _FinalStage locationName(Optional<String> locationName);

        _FinalStage locationName(String locationName);

        _FinalStage adminArea(Optional<String> adminArea);

        _FinalStage adminArea(String adminArea);

        _FinalStage phoneNumbers(Optional<List<PhoneNumber>> phoneNumbers);

        _FinalStage phoneNumbers(List<PhoneNumber> phoneNumbers);

        _FinalStage merchant(Optional<MerchantResponse> merchant);

        _FinalStage merchant(MerchantResponse merchant);

        _FinalStage storeType(Optional<StoreTypeSchema> storeType);

        _FinalStage storeType(StoreTypeSchema storeType);

        _FinalStage restaurantConfiguration(Optional<RestaurantConfigurationResponse> restaurantConfiguration);

        _FinalStage restaurantConfiguration(RestaurantConfigurationResponse restaurantConfiguration);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, _FinalStage {
        private String id;

        private Optional<RestaurantConfigurationResponse> restaurantConfiguration = Optional.empty();

        private Optional<StoreTypeSchema> storeType = Optional.empty();

        private Optional<MerchantResponse> merchant = Optional.empty();

        private Optional<List<PhoneNumber>> phoneNumbers = Optional.empty();

        private Optional<String> adminArea = Optional.empty();

        private Optional<String> locationName = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> timezone = Optional.empty();

        private Optional<String> addressLine3 = Optional.empty();

        private Optional<String> addressLine2 = Optional.empty();

        private Optional<String> addressLine1 = Optional.empty();

        private Optional<Map<String, Object>> contacts = Optional.empty();

        private Optional<String> storePhone = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        private Map<String, Object> name = new LinkedHashMap<>();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(StoreResponse other) {
            createdAt(other.getCreatedAt());
            id(other.getId());
            name(other.getName());
            externalId(other.getExternalId());
            storePhone(other.getStorePhone());
            contacts(other.getContacts());
            addressLine1(other.getAddressLine1());
            addressLine2(other.getAddressLine2());
            addressLine3(other.getAddressLine3());
            timezone(other.getTimezone());
            city(other.getCity());
            postalCode(other.getPostalCode());
            country(other.getCountry());
            locationName(other.getLocationName());
            adminArea(other.getAdminArea());
            phoneNumbers(other.getPhoneNumbers());
            merchant(other.getMerchant());
            storeType(other.getStoreType());
            restaurantConfiguration(other.getRestaurantConfiguration());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(String id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public _FinalStage restaurantConfiguration(RestaurantConfigurationResponse restaurantConfiguration) {
            this.restaurantConfiguration = Optional.ofNullable(restaurantConfiguration);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "restaurant_configuration", nulls = Nulls.SKIP)
        public _FinalStage restaurantConfiguration(Optional<RestaurantConfigurationResponse> restaurantConfiguration) {
            this.restaurantConfiguration = restaurantConfiguration;
            return this;
        }

        @java.lang.Override
        public _FinalStage storeType(StoreTypeSchema storeType) {
            this.storeType = Optional.ofNullable(storeType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "store_type", nulls = Nulls.SKIP)
        public _FinalStage storeType(Optional<StoreTypeSchema> storeType) {
            this.storeType = storeType;
            return this;
        }

        @java.lang.Override
        public _FinalStage merchant(MerchantResponse merchant) {
            this.merchant = Optional.ofNullable(merchant);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "merchant", nulls = Nulls.SKIP)
        public _FinalStage merchant(Optional<MerchantResponse> merchant) {
            this.merchant = merchant;
            return this;
        }

        @java.lang.Override
        public _FinalStage phoneNumbers(List<PhoneNumber> phoneNumbers) {
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phone_numbers", nulls = Nulls.SKIP)
        public _FinalStage phoneNumbers(Optional<List<PhoneNumber>> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        @java.lang.Override
        public _FinalStage adminArea(String adminArea) {
            this.adminArea = Optional.ofNullable(adminArea);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "admin_area", nulls = Nulls.SKIP)
        public _FinalStage adminArea(Optional<String> adminArea) {
            this.adminArea = adminArea;
            return this;
        }

        @java.lang.Override
        public _FinalStage locationName(String locationName) {
            this.locationName = Optional.ofNullable(locationName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "location_name", nulls = Nulls.SKIP)
        public _FinalStage locationName(Optional<String> locationName) {
            this.locationName = locationName;
            return this;
        }

        @java.lang.Override
        public _FinalStage country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public _FinalStage country(Optional<String> country) {
            this.country = country;
            return this;
        }

        @java.lang.Override
        public _FinalStage postalCode(String postalCode) {
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "postal_code", nulls = Nulls.SKIP)
        public _FinalStage postalCode(Optional<String> postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        @java.lang.Override
        public _FinalStage city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public _FinalStage city(Optional<String> city) {
            this.city = city;
            return this;
        }

        @java.lang.Override
        public _FinalStage timezone(String timezone) {
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "timezone", nulls = Nulls.SKIP)
        public _FinalStage timezone(Optional<String> timezone) {
            this.timezone = timezone;
            return this;
        }

        @java.lang.Override
        public _FinalStage addressLine3(String addressLine3) {
            this.addressLine3 = Optional.ofNullable(addressLine3);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "address_line_3", nulls = Nulls.SKIP)
        public _FinalStage addressLine3(Optional<String> addressLine3) {
            this.addressLine3 = addressLine3;
            return this;
        }

        @java.lang.Override
        public _FinalStage addressLine2(String addressLine2) {
            this.addressLine2 = Optional.ofNullable(addressLine2);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "address_line_2", nulls = Nulls.SKIP)
        public _FinalStage addressLine2(Optional<String> addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }

        @java.lang.Override
        public _FinalStage addressLine1(String addressLine1) {
            this.addressLine1 = Optional.ofNullable(addressLine1);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "address_line_1", nulls = Nulls.SKIP)
        public _FinalStage addressLine1(Optional<String> addressLine1) {
            this.addressLine1 = addressLine1;
            return this;
        }

        @java.lang.Override
        public _FinalStage contacts(Map<String, Object> contacts) {
            this.contacts = Optional.ofNullable(contacts);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "contacts", nulls = Nulls.SKIP)
        public _FinalStage contacts(Optional<Map<String, Object>> contacts) {
            this.contacts = contacts;
            return this;
        }

        @java.lang.Override
        public _FinalStage storePhone(String storePhone) {
            this.storePhone = Optional.ofNullable(storePhone);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "store_phone", nulls = Nulls.SKIP)
        public _FinalStage storePhone(Optional<String> storePhone) {
            this.storePhone = storePhone;
            return this;
        }

        @java.lang.Override
        public _FinalStage externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "external_id", nulls = Nulls.SKIP)
        public _FinalStage externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        public _FinalStage name(String key, Object value) {
            this.name.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllName(Map<String, Object> name) {
            this.name.putAll(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Map<String, Object> name) {
            this.name.clear();
            this.name.putAll(name);
            return this;
        }

        @java.lang.Override
        public _FinalStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        public StoreResponse build() {
            return new StoreResponse(
                    createdAt,
                    id,
                    name,
                    externalId,
                    storePhone,
                    contacts,
                    addressLine1,
                    addressLine2,
                    addressLine3,
                    timezone,
                    city,
                    postalCode,
                    country,
                    locationName,
                    adminArea,
                    phoneNumbers,
                    merchant,
                    storeType,
                    restaurantConfiguration,
                    additionalProperties);
        }
    }
}
